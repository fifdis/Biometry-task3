import numpy as np
import cv2
import os
import matplotlib.pyplot as plt


# Функция для загрузки базы ORLfaces
def load_ORL_faces(data_folder):
    images = []
    labels = []
    for i in range(1, 41):
        for j in range(1, 11):
            img_path = os.path.join(data_folder, f"s{i}", f"{j}.pgm")
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            if img is not None:  # Проверяем, удалось ли загрузить изображение
                images.append(img.flatten())
                labels.append(i)
    return np.array(images), np.array(labels)


# Функция для реализации метода PCA с уменьшением размерности изображения
def pca_image_reduction(X, num_components):
    # Центрирование данных
    X_mean = np.mean(X, axis=0)
    X_centered = X - X_mean

    # Вычисление ковариационной матрицы
    cov_matrix = np.cov(X_centered.T)

    # Вычисление собственных значений и собственных векторов
    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)

    # Сортировка собственных значений и векторов по убыванию
    sorted_indices = np.argsort(eigenvalues)[::-1]
    sorted_eigenvalues = eigenvalues[sorted_indices]
    sorted_eigenvectors = eigenvectors[:, sorted_indices]

    # Выбор указанного количества главных компонент
    principal_components = sorted_eigenvectors[:, :num_components]

    return sorted_eigenvalues, sorted_eigenvectors[:, :10]


# Функция для реализации метода PCA с использованием матрицы Грама-Шмидта
def pca_gram_schmidt(X, num_components):
    # Центрирование данных
    X_mean = np.mean(X, axis=0)
    X_centered = X - X_mean

    # Вычисление матрицы Грама
    gram_matrix = np.dot(X_centered, X_centered.T)

    # Применение метода Грама-Шмидта
    q, _ = np.linalg.qr(gram_matrix)

    # Вычисление собственных значений и собственных векторов
    eigenvalues, eigenvectors = np.linalg.eigh(q)

    # Сортировка собственных значений и векторов по убыванию
    sorted_indices = np.argsort(eigenvalues)[::-1]
    sorted_eigenvalues = eigenvalues[sorted_indices]
    sorted_eigenvectors = eigenvectors[:, sorted_indices]

    # Выбор указанного количества главных компонент
    principal_components = np.dot(X_centered.T, sorted_eigenvectors[:, :num_components])

    return sorted_eigenvalues, sorted_eigenvectors[:, :10]


# Загрузка данных ORLfaces
data_folder = "ORLdataset"
images, labels = load_ORL_faces(data_folder)

# Количество компонент для PCA
num_components = 100

# Метод уменьшения размерности изображения
eigenvalues_img, eigenvectors_img = pca_image_reduction(images, num_components)

# Визуализация результатов для метода уменьшения размерности изображения
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(np.cov(images.T), cmap='gray')
plt.title('Covariance Matrix (Image Reduction)')

plt.subplot(1, 3, 2)
plt.plot(eigenvalues_img)
plt.title('Eigenvalues (Image Reduction)')

plt.subplot(1, 3, 3)
plt.imshow(eigenvectors_img, cmap='gray')
plt.title('Top 10 Eigenvectors (Image Reduction)')

plt.show()

# Метод использования матрицы Грама-Шмидта
eigenvalues_gram, eigenvectors_gram = pca_gram_schmidt(images, num_components)

# Визуализация результатов для метода использования матрицы Грама-Шмидта
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(np.cov(images.T), cmap='gray')
plt.title('Covariance Matrix (Gram-Schmidt)')

plt.subplot(1, 3, 2)
plt.plot(eigenvalues_gram)
plt.title('Eigenvalues (Gram-Schmidt)')

plt.subplot(1, 4, 3)
plt.imshow(eigenvectors_gram, cmap='gray')
plt.title('Top 10 Eigenvectors (Gram-Schmidt)')

plt.show()


