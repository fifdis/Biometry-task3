import numpy as np
import cv2
import os
import matplotlib.pyplot as plt

# Функция для загрузки базы ORLfaces
def load_ORL_faces(data_folder):
    images = []
    labels = []
    for i in range(1, 41):
        for j in range(1, 11):
            img = cv2.imread(f"{data_folder}/s{i}/{j}.pgm", cv2.IMREAD_GRAYSCALE)
            images.append(img.flatten())
            labels.append(i)
    return np.array(images), np.array(labels)


# Функция для реализации метода PCA
def pca(X, num_components):
    # Центрирование данных
    X_mean = np.mean(X, axis=0)
    X_centered = X - X_mean

    # Вычисление ковариационной матрицы
    cov_matrix = np.cov(X_centered.T)

    # Вычисление собственных значений и собственных векторов
    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)

    # Сортировка собственных значений и векторов по убыванию
    sorted_indices = np.argsort(eigenvalues)[::-1]
    sorted_eigenvalues = eigenvalues[sorted_indices]
    sorted_eigenvectors = eigenvectors[:, sorted_indices]

    # Выбор указанного количества главных компонент
    principal_components = sorted_eigenvectors[:, :num_components]

    # Преобразование данных
    transformed_data = np.dot(X_centered, principal_components)

    return transformed_data, sorted_eigenvalues, sorted_eigenvectors


# Загрузка данных ORLfaces
data_folder = "ORLdataset"
images, labels = load_ORL_faces(data_folder)

# Реализация метода PCA для уменьшения размерности изображения
num_components = 100
transformed_data, eigenvalues, eigenvectors = pca(images, num_components)

# Визуализация ковариационной матрицы, собственных чисел и собственных векторов
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(np.cov(images.T), cmap='gray')
plt.title('Covariance Matrix')

plt.subplot(1, 3, 2)
plt.plot(eigenvalues)
plt.title('Eigenvalues')

plt.subplot(1, 3, 3)
plt.imshow(eigenvectors[:, :10], cmap='gray')
plt.title('Top 10 Eigenvectors')

plt.show()
